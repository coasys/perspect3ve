{
  "version": 3,
  "file": "splash.css",
  "sources": [
    "CapabilityDialog.svelte",
    "InitDialog.svelte",
    "LinkExtern.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import \"svelte\";\nimport Dialog, { Title, Content } from '@smui/dialog';\nimport Button, { Label } from '@smui/button';\nimport Textfield, { Input } from '@smui/textfield';\nimport HelperText from '@smui/textfield/helper-text/index';\nimport FloatingLabel from '@smui/floating-label';\nimport LineRipple from '@smui/line-ripple';\nimport { Ad4mClient } from \"@perspect3vism/ad4m\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { createEventDispatcher } from 'svelte';\nconst dispatch = createEventDispatcher();\nexport let executorUrl;\nexport let capToken;\nexport let appName;\nexport let appIconPath;\nexport let showQrScanner;\nexport let resolve;\nexport let qrScanRequest;\nlet dialog;\nlet requestId;\nlet code;\nlet validCode = true;\nlet corruptedJwt = false;\nfunction generateCient(uri, authorization) {\n    const wsLink = new WebSocketLink({\n        uri,\n        options: {\n            reconnect: true,\n            connectionParams: async () => {\n                return { headers: { authorization } };\n            }\n        },\n        webSocketImpl: WebSocket,\n    });\n    let apolloClient = new ApolloClient({\n        link: wsLink,\n        cache: new InMemoryCache({ resultCaching: false, addTypename: false }),\n        defaultOptions: {\n            watchQuery: {\n                fetchPolicy: \"no-cache\",\n            },\n            query: {\n                fetchPolicy: \"no-cache\",\n            }\n        },\n    });\n    return new Ad4mClient(apolloClient);\n}\nexport async function run() {\n    if (executorUrl && capToken) {\n        try {\n            const ad4m = generateCient(executorUrl, capToken);\n            await ad4m.agent.status();\n            resolve(executorUrl, capToken, ad4m);\n        }\n        catch (e) {\n            // jwt invalid, inform user\n            corruptedJwt = true;\n            dialog.open();\n        }\n    }\n    else {\n        dialog.open();\n    }\n}\nasync function requestCapability() {\n    try {\n        let capabilities = [{ \"with\": { \"domain\": \"*\", \"pointers\": [\"*\"] }, \"can\": [\"*\"] }];\n        let ad4mClientWithoutJwt = generateCient(executorUrl, '');\n        requestId = await ad4mClientWithoutJwt.agent.requestCapability(\"perspect3ve\", \"general purpose ad4m browser\", \"https://github.com/perspect3vism/perspect3ve\", JSON.stringify(capabilities));\n        console.log(\"auth request id: \", requestId);\n    }\n    catch (err) {\n        console.log(err);\n    }\n}\nasync function generateJwt() {\n    try {\n        let ad4mClientWithoutJwt = generateCient(executorUrl, '');\n        let jwt = await ad4mClientWithoutJwt.agent.generateJwt(requestId, code);\n        console.log(\"auth jwt: \", jwt);\n        await checkJwt(jwt);\n    }\n    catch (err) {\n        console.log(err);\n        validCode = false;\n    }\n}\nasync function checkJwt(jwt) {\n    let ad4mClientJwt = generateCient(executorUrl, jwt);\n    try {\n        let status = await ad4mClientJwt.agent.status();\n        console.log('agent status:', status);\n        dispatch('valid-jwt');\n        setTimeout(() => { }, 100);\n        resolve(executorUrl, jwt, ad4mClientJwt);\n    }\n    catch (e) {\n        console.log(e);\n    }\n}\n</script>\n\n<Dialog\n    bind:this={dialog}\n    aria-labelledby=\"dialog-title\"\n    aria-describedby=\"dialog-content\"\n    scrimClickAction=\"\"\n    escapeKeyAction=\"\"\n>\n    <Title id=\"dialog-title\">\n        <img class=\"title-logo\" src=\"Ad4mLogo.png\" alt=\"Logo\"> AD4M Connection Wizard\n    </Title>\n    <Content id=\"dialog-content\">\n        {#if !requestId}\n            <span class=\"app-name\">{appName}</span> needs to connect to your AD4M node/executor and request a unique capability token.\n            {#if appIconPath}\n                <div class=\"icons-connection\">\n                    <img src=\"{appIconPath}\" alt=\"App Logo\" style=\"width: 150px\">\n                    <span class=\"material-icons link-icon\">link</span>\n                    <img src=\"Ad4mLogo.png\" alt=\"Logo\" style=\"width: 150px\">\n                </div>\n            {/if}\n\n            Please enter or correct the AD4M executor URL:\n            \n            <Textfield fullwidth invalid={!validCode} lineRipple={false} label=\"AD4M executor URL:\">\n                <Input bind:value={executorUrl} id=\"executor-url\" />\n                <LineRipple />\n            </Textfield>\n\n            {#if showQrScanner}\n                <br>\n                Or click here to scan your executor's QR code:\n                <Button on:click={()=>{executorUrl = qrScanRequest()}}>\n                    <span class=\"material-icons\">qr_code</span>\n                </Button>\n            {/if}\n\n            <p></p>\n\n            <Button variant=\"raised\" on:click={requestCapability}>\n                <Label>Send Capability Request</Label>\n            </Button>\n        {/if}\n\n        {#if requestId}\n            Capability request was successfully sent.\n            Please check your AD4M admin UI (AD4Min), \n            confirm the request there and \n            <span class=\"app-name\">\n                enter the 6-digit security code below, that AD4Min displays to you.\n            </span>\n            <Textfield fullwidth invalid={!validCode} lineRipple={false} label=\"Security Code\">\n                <Input bind:value={code} id=\"jwt-generation-code\" />\n                <FloatingLabel for=\"jwt-generation-code\">{validCode ? \"Security Code\" : \"Invalid Code\"}</FloatingLabel>\n                <LineRipple />\n            </Textfield>\n            <HelperText id=\"unlock-helper-text\">Please enter the code from ad4min</HelperText>\n            <p>\n                <Button variant=\"raised\" on:click={()=>requestId=undefined}>\n                    <Label>Back</Label>\n                </Button>\n                <Button variant=\"raised\" on:click={generateJwt}>\n                    <Label>Submit</Label>\n                </Button>\n            </p>\n        {/if}\n    </Content>\n</Dialog>\n\n\n<style>\n\n  h2 {\n    text-align: center;\n    font-size: 24px;\n  }\n\n  .dialog-title {\n    text-align: center;\n    line-height: 42px;\n  }\n\n  .title-logo {\n    height: 42px;\n    margin-bottom: -12px;\n  } \n\n  .app-name {\n    font-weight: bold;\n  } \n\n  .icons-connection {\n    text-align: center;\n  } \n\n  .link-icon {\n    position: relative;\n    top: -50px;\n  } \n  .capability-request {\n    background-color: white;\n  }\n</style>",
    "<script lang=\"ts\">import { getContext } from \"svelte\";\nimport Dialog, { Title, Content, Actions } from '@smui/dialog';\nimport Button, { Label } from '@smui/button';\nimport Textfield, { Input } from '@smui/textfield';\nimport HelperText from '@smui/textfield/helper-text/index';\nimport FloatingLabel from '@smui/floating-label';\nimport LineRipple from '@smui/line-ripple';\nimport LinkExtern from './LinkExtern.svelte';\nconst { ipcRenderer } = require('electron');\n// const executorPort = ipcRenderer.sendSync('port-request', '')\nconst ad4m = getContext('ad4mClient');\nfunction emitAgentUnlock() {\n    ipcRenderer.send('agent-unlock', '');\n}\nasync function check() {\n    const status = await ad4m.agent.status();\n    console.log(\"agent status check:\", status);\n    if (!status.isInitialized) {\n        initDialog.open();\n    }\n    else {\n        initDialog.close();\n        if (!status.isUnlocked) {\n            did = status.did;\n            unlockDialog.open();\n        }\n        else {\n            unlockDialog.close();\n            emitAgentUnlock();\n        }\n    }\n}\nlet initDialog;\nlet didElementDialog;\nlet didKeyDialog;\nlet unlockDialog;\nlet did;\nlet didDocument;\nlet keystore;\nlet passphrase;\nlet passphrase2;\nlet passphraseError;\nlet unlockError;\nfunction submitDID() {\n    console.error(\"Submitting DID documents not implemented!\");\n    /*\n    GQL_INITIALIZE_AGENT({\n        variables: {\n            did,\n            didDocument: JSON.stringify(didDocument),\n            keystore,\n            passphrase\n        }\n    }).then(() => check())\n    */\n}\nfunction submitKeyDID() {\n    if (passphrase !== passphrase2) {\n        passphraseError = \"Passphrases don't match!\";\n        setTimeout(didKeyDialog.open, 10);\n        return;\n    }\n    ad4m.agent.generate(passphrase);\n}\nfunction resolveDID() {\n    console.log(\"resolve:\", did);\n    fetch(`https://resolver.identity.foundation/1.0/identifiers/${did}`)\n        .then(response => response.json())\n        .then(data => didDocument = data);\n}\nasync function unlockKeystore() {\n    const status = await ad4m.agent.unlock(passphrase);\n    console.log(\"unlock response:\", status);\n    unlockError = status.error;\n    passphrase = \"\";\n    if (status.isUnlocked) {\n        unlockDialog.close();\n        emitAgentUnlock();\n    }\n    else {\n        unlockDialog.open();\n    }\n}\nfunction quit() {\n    ad4m.runtime.quit();\n}\nfunction importKeystore() {\n    initDialog.close();\n    didElementDialog.open();\n}\nasync function createKeys() {\n    initDialog.close();\n    didKeyDialog.open();\n}\ncheck();\n</script>\n\n<Dialog\n    bind:this={initDialog}\n    aria-labelledby=\"dialog-title\"\n    aria-describedby=\"dialog-content\"\n    scrimClickAction=\"\"\n    escapeKeyAction=\"\"\n>\n    <Title id=\"dialog-title\">Setup Agent Identity</Title>\n    <Content id=\"dialog-content\">\n        <h1>Welcome to Perspect3ve</h1>\n        <div>\n            Perspect3ve is a general purpose AD4M interface and as such uses <LinkExtern url=\"https://w3c.github.io/did-core/\">DIDs (Decentralized Identifier)</LinkExtern> \n            as the agent representation.\n            This means it does not add its own siloed user handling / login, but in principle can work with any decentralized/sovereign\n            identitiy platform that implements DID (like <LinkExtern url=\"https://www.uport.me/\">uPort</LinkExtern>, <LinkExtern url=\"https://sovrin.org/\">sovrin</LinkExtern>, a DID document on your own webserver, etc.).\n        </div>\n        <div>\n            If you don't know what this means, it's safe to choose to create a new and ephemeral DID with only locally stored keys.\n        </div>\n        <div>\n            But if you want to use Perspectivism with your already existing DID, you can also import the according keystore\n            and have Perspectivism sign all expressions under your existing identity.\n        </div>\n\n    </Content>\n    <Actions>\n        <Button variant=\"outlined\" on:click={importKeystore}>\n            <Label>Import existing DID & keystore</Label>\n        </Button>\n        <Button variant=\"raised\" on:click={createKeys}>\n            <Label>Create new ephemeral DID & keys</Label>\n        </Button>\n    </Actions>\n</Dialog>\n\n<Dialog bind:this={didKeyDialog}\n    scrimClickAction=\"\"\n    escapeKeyAction=\"\"\n>\n    <Title id=\"dialog-title\">Create new keystore</Title>\n    <Content>\n        <h1>Create new Keystore</h1>\n        <div>\n            <div>\n                Please enter a new passphrase to lock your keystore with:\n            </div>\n            \n            <Textfield fullwidth lineRipple={false} label=\"Keystore\">\n                <Input bind:value={passphrase} id=\"input-did\" type=\"password\" aria-controls=\"unlock-helper-text\" aria-describedby=\"unlock-helper-text\" />\n                <FloatingLabel for=\"input-did\">Passphrase</FloatingLabel>\n                <LineRipple />\n            </Textfield>\n            <HelperText id=\"unlock-helper-text\">Please enter the passphrase for you keystore</HelperText>\n            {#if unlockError}\n                <p>\n                <div class=\"error\">{unlockError}</div>    \n            {/if}\n            <Textfield fullwidth lineRipple={false} label=\"Keystore\">\n                <Input bind:value={passphrase2} id=\"input-did\" type=\"password\" aria-controls=\"unlock-helper-text\" aria-describedby=\"unlock-helper-text\" />\n                <FloatingLabel for=\"input-did\">Passphrase again</FloatingLabel>\n                <LineRipple />\n            </Textfield>\n            <HelperText id=\"unlock-helper-text\">Please re-enter the same passphrase to be sure</HelperText>\n            {#if passphraseError}\n                <p>\n                <div class=\"error\">{passphraseError}</div>    \n            {/if}\n        </div>\n        \n        \n    </Content>\n    \n    <Actions>\n        <Button on:click={quit}>\n            <Label>Quit</Label>\n        </Button>\n        <Button variant=\"raised\" on:click={submitKeyDID}>\n            <Label>Finish</Label>\n        </Button>\n    </Actions>\n</Dialog>\n\n\n<Dialog\n    bind:this={didElementDialog}\n    aria-labelledby=\"dialog-title\"\n    aria-describedby=\"dialog-content\"\n    scrimClickAction=\"\"\n    escapeKeyAction=\"\"\n>\n    <Title id=\"dialog-title\">Import DID keystore</Title>\n    <Content id=\"dialog-content\">\n        <h1>Import DID & Keystore</h1>\n        <div>\n            Currently, the only supported keystore format is the one used and exported by <LinkExtern url=\"https://element-did.com\">https://element-did.com</LinkExtern>.\n        </div>\n        <div>\n            If have another DID provider you want to use with Perspectivism, please <LinkExtern url=\"https://github.com/lucksus/perspectivism/issues/new\">create a ticket and let us know!</LinkExtern>\n        </div>\n        <div>\n            DID: \n            <Textfield fullwidth lineRipple={false} label=\"DID\">\n                <Input bind:value={did} id=\"input-did\" aria-controls=\"did-helper-text\" aria-describedby=\"did-helper-text\" />\n                <FloatingLabel for=\"input-did\">DID handle</FloatingLabel>\n                <LineRipple />\n            </Textfield>\n            <HelperText id=\"did-helper-text\">Please paste here your already existing DID (e.g.: did:github:lucksus)</HelperText>\n            <HelperText id=\"keystore-helper-text\">Keystore (locked)</HelperText>\n            <br>\n            DID document:Please paste here your locked/encrypted keystore string\n        </div>\n        <div>\n            Keystore: \n            <Textfield fullwidth lineRipple={false} label=\"Keystore\">\n                <Input bind:value={keystore} id=\"input-keystore\" aria-controls=\"keystore-helper-text\" aria-describedby=\"keystore-helper-text\" />\n                <FloatingLabel for=\"input-keystore\">Locked keystore string</FloatingLabel>\n                <LineRipple />\n            </Textfield>\n            <HelperText id=\"keystore-helper-text\">Please paste here your locked/encrypted keystore string</HelperText>\n            <br>\n            Passphrase:\n            <Textfield fullwidth lineRipple={false} label=\"Passphrase\">\n                <Input bind:value={passphrase} id=\"input-keystore\" type=\"password\" aria-controls=\"keystore-helper-text\" aria-describedby=\"keystore-helper-text\" />\n                <FloatingLabel for=\"input-keystore\">Passphrase</FloatingLabel>\n                <LineRipple />\n            </Textfield>\n            <HelperText id=\"keystore-helper-text\">Passphrase for above entered keystore cipher</HelperText>\n        </div>\n        \n    </Content>\n    <Actions>\n        <Button on:click={quit}>\n            <Label>Quit</Label>\n        </Button>\n        <Button on:click={submitDID}>\n            <Label>Submit</Label>\n        </Button>\n    </Actions>\n</Dialog>\n\n<Dialog bind:this={unlockDialog}\n    scrimClickAction=\"\"\n    escapeKeyAction=\"\"\n>\n    <Title id=\"dialog-title\">Unlock Agent Keystore</Title>\n    <Content>\n        <span class=\"did\">{did}</span>\n        <Textfield fullwidth lineRipple={false} label=\"Keystore\">\n            <Input bind:value={passphrase} id=\"input-did\" type=\"password\" aria-controls=\"unlock-helper-text\" aria-describedby=\"unlock-helper-text\" />\n            <FloatingLabel for=\"input-did\">Passphrase</FloatingLabel>\n            <LineRipple />\n        </Textfield>\n        <HelperText id=\"unlock-helper-text\">Please enter the passphrase for you keystore</HelperText>\n        {#if unlockError}\n            <p>\n            <div class=\"error\">{unlockError}</div>    \n        {/if}\n    </Content>\n    \n    <Actions>\n        <Button on:click={quit}>\n            <Label>Quit</Label>\n        </Button>\n        <Button variant=\"raised\" on:click={unlockKeystore}>\n            <Label>Unlock</Label>\n        </Button>\n    </Actions>\n</Dialog>\n\n<style>\n    .error {\n        color: red;\n    }\n\n    .did {\n        max-width: 512px;\n        word-wrap: break-word;\n    }\n</style>",
    "<script lang=\"ts\">import { getContext } from \"svelte\";\nconst ad4m = getContext('ad4mClient');\nexport let url;\nfunction click() {\n    ad4m.runtime.openLink(url);\n}\n</script>\n\n<!-- svelte-ignore a11y-invalid-attribute -->\n<a class=\"link\" href=\"#\" on:click={click}><slot></slot></a>\n\n<style>\n    .link {\n        cursor: pointer;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AAyLE,WAAW,cAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,KAAK,AACtB,CAAC,AAED,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,iBAAiB,cAAC,CAAC,AACjB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,AACZ,CAAC;ACkEC,MAAM,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,AACd,CAAC,AAED,IAAI,cAAC,CAAC,AACF,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,UAAU,AACzB,CAAC;ACtQD,KAAK,cAAC,CAAC,AACH,MAAM,CAAE,OAAO,AACnB,CAAC"
}